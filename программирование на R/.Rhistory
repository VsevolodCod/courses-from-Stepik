t.test(V1  ~ V2, t1, var.equal = T)
t.test(V1  ~ V2, ttg, var.equal = T)
wilcox.test(Petal.Length ~ Species, ttg)
View(ttg)
View(fit3b)
t.test(V1  ~ V2, ttg, var.equal = T)
df <- read.table("dataset_11504_15 (4).txt", header=FALSE)
b_test <- bartlett.test(V1 ~ V2, df)
if (b_test$p-value>=0.05){
print(round(x=t.test(V1 ~ V2, df, var.equal = T)$p.value, digits = 4))
}else{
print(round(x = wilcox.test(V1 ~ V2, df)$p.value, digits = 4))
}
df <- read.table("dataset_11504_15 (4).txt", header=FALSE)
b_test <- bartlett.test(V1 ~ V2, df)
if (b_test$p-value>=0.05){
print(round(x=t.test(V1 ~ V2, df, var.equal = T)$p-value, digits = 4))
}else{
print(round(x = wilcox.test(V1 ~ V2, df)$p-value, digits = 4))
}
df <- read.table("dataset_11504_15 (4).txt", header=FALSE)
b_test <- bartlett.test(V1 ~ V2, df)
if (b_test$p-value>=0.05){
print(round(x=t.test(V1 ~ V2, df, var.equal = T)$p-value, digits = 4))
}else{
print(round(x = wilcox.test(V1 ~ V2, df)$p-value, digits = 4))
}
df <- read.table("dataset_11504_15 (4).txt", header=FALSE)
b_test <- bartlett.test(V1 ~ V2, df)
if (b_test$p-value>=0.05){
print(round(x=t.test(V1 ~ V2, df, var.equal = T)$p-value, digits = 4))
}else{
print(round(x = wilcox.test(V1 ~ V2, df)$p-value, digits = 4))
}
df <- read.table("dataset_11504_15 (4).txt", header=FALSE)
b_test <- bartlett.test(V1 ~ V2, df)
if (b_test$p-value>=0.05){
print(round(x=t.test(V1 ~ V2, df, var.equal = T)$p-value, digits = 4))
}else{
print(round(x = wilcox.test(V1 ~ V2, df)$p-value, digits = 4))
}
df <- read.table("dataset_11504_15 (4).txt", header=FALSE)
b_test <- bartlett.test(V1 ~ V2, df)
if (b_test$p_value>=0.05){
print(round(x=t.test(V1 ~ V2, df, var.equal = T)$p_value, digits = 4))
}else{
print(round(x = wilcox.test(V1 ~ V2, df)$p_value, digits = 4))
}
df <- read.table("dataset_11504_15 (4).txt", header=FALSE)
b_test <- bartlett.test(V1 ~ V2, data = df)
if (b_test$p.value >= 0.05) {
p_value <- t.test(V1 ~ V2, data = df, var.equal = TRUE)$p.value
} else {
p_value <- wilcox.test(V1 ~ V2, data = df)$p.value
}
print(round(p_value, digits = 4))
df <- read.table("dataset_11504_15 (5).txt", header=FALSE)
b_test <- bartlett.test(V1 ~ V2, data = df)
if (b_test$p.value >= 0.05) {
p_value <- t.test(V1 ~ V2, data = df, var.equal = TRUE)$p.value
} else {
p_value <- wilcox.test(V1 ~ V2, data = df)$p.value
}
print(round(p_value, digits = 4))
ttg <- read.table("dataset_11504_15 (5).txt")
bartlett.test(V1 ~ V2, ttg)
t.test(V1  ~ V2, ttg, var.equal = T)
daaataa <- read.table("dataset_11504_16 (2).txt")
t_te <- t.test(daaataa$V1 , daaataa$V2, var.equal = F)$p.value
if (t<0.05){
print(c(mean(daaataa$V1), mean(daaataa$V2), t_te))
}else{
print("The difference is not significant")
}
if (t_te <0.05){
print(c(mean(daaataa$V1), mean(daaataa$V2), t_te))
}else{
print("The difference is not significant")
}
daaataa <- read.table("dataset_11504_16 (3).txt")
t_te <- t.test(daaataa$V1 , daaataa$V2, var.equal = F)$p.value
if (t_te <0.05){
print(c(mean(daaataa$V1), mean(daaataa$V2), t_te))
}else{
print("The difference is not significant")
}
my_calc  <- function(x,y) {
s <- x +y
return(s)
}
View(my_calc)
my_calc(x = 10, y = 15)
result <- my_calc(x = 10, y = 15)
my_calc  <- function(x,y) {
s <- x +y
d <- x -y
return(c(s,d))
}
result <- my_calc(x = 10, y = 15)
result
my_calc  <- function(x,y) {
s <- x +y
d <- x -y
return(c(s,d))
}
result <- my_calc(x = 10, y = 15)
s <- 100
my_calc(x = 10, y = 15)
s
my_calc2  <- function(x,y,z) {
s <- x +y +z
d <- x -y - z
return(c(s,d))
}
my_calc2(1,2,3)
my_calc2(1,2)
my_calc2  <- function(x,y,z = 10) {
s <- x +y +z
d <- x -y - z
return(c(s,d))
}
my_calc2(1,2)
dister1 <- rnorm(100)
hist(dister1)
dister1[is.na(disrt1)]
distr1[is.na(disrt1)]
dister1[is.na(dister1)]
dister1[is.na(dister1)] <- mean(dister1, na.rm =  T)
dister1
dister1[1:30] <- NA
dister1[is.na(dister1)] <- mean(dister1, na.rm =  T)
dister1
my_na_rm <- function(x){
x[is.na(x)] <- mean(x, na.rm = T)
return(x)
}
dister1 <- rnorm(100)
dister1[1:30] <- NA
my_na_rm(x = dister1)
dister1 <- rnorm(100)
dister1[1:30] <- NA
dister1 <- my_na_rm(x = dister1)
dister1
hist(dister1)
my_na_rm(x = c("2", "3", NA))
my_na_rm <- function(x){
if (is.numeric(x)){
x[is.na(x)] <- mean(x, na.rm = T)
return(x)
}else{
print("x is not numirec")
}
}
my_na_rm(x = c("2", "3", NA))
stat_test <- shapiro.test(rnprm(1000))
stat_test <- shapiro.test(rnorm(1000))
stat_test
my_na_rm <- function(x){
if (is.numeric(x)){
stat_test <- shapiro.test(x)
if (stat_test$p.value >0.05){
x[is.na(x)] <- mean(x, na.rm = T)
}else {
x[is.na(x)] <- median(x, na.rm = T)
}
return(x)
}else{
print("x is not numeric")
}
}
my_na_rm <- function(x){
if (is.numeric(x)){
stat_test <- shapiro.test(x)
if (stat_test$p.value >0.05){
x[is.na(x)] <- mean(x, na.rm = T)
}else {
x[is.na(x)] <- median(x, na.rm = T)
}
return(x)
}else{
print("x is not numeric")
}
}
dister1 <- rnorm(1000)
dister1[1:30] <- NA
dister1 <- my_na_rm(dister1)
dister1
my_na_rm <- function(x){
if (is.numeric(x)){
stat_test <- shapiro.test(x)
if (stat_test$p.value >0.05){
x[is.na(x)] <- mean(x, na.rm = T)
print("NA values were replaced with mean")
}else {
x[is.na(x)] <- median(x, na.rm = T)
print("NA values were replaced with median")
}
return(x)
}else{
print("x is not numeric")
}
dister1 <- my_na_rm(dister1)
dister1
my_na_rm <- function(x){
if (is.numeric(x)){
stat_test <- shapiro.test(x)
if (stat_test$p.value >0.05){
x[is.na(x)] <- mean(x, na.rm = T)
print("NA values were replaced with mean")
}else {
x[is.na(x)] <- median(x, na.rm = T)
print("NA values were replaced with median")
}
return(x)
}else{
print("x is not numeric")
}
}
q
q
end
my_na_rm <- function(x){
if (is.numeric(x)){
stat_test <- shapiro.test(x)
if (stat_test$p.value >0.05){
x[is.na(x)] <- mean(x, na.rm = T)
print("NA values were replaced with mean")
}else {
x[is.na(x)] <- median(x, na.rm = T)
print("NA values were replaced with median")
}
return(x)
}else{
print("x is not numeric")
}
}
dister1 <- my_na_rm(dister1)
dister1 <- rnorm(1000)
dister1[1:30] <- NA
dister1 <- my_na_rm(dister1)
d1 <- rnorm(2000)
d2 <- runif(2000)
d1[1:10]<- NA
d2[1:10]<- NA
d1 <- my_na_rm(d1)
head(d1)
d2 <- my_na_rm(d2)
head(d2)
dir()
dir(pattern = "*.csv")
grants <- data.frame()
for (i in dir(pattern = "*.csv")){
temp_df <- read.csv(i)
grants <- rbind(temp_df, grants)
}
View(grants)
df <- data.frame()
read_data <- function(){
df <- data.frame()
for (i in dir(pattern = "*.csv")){
temp_df <- read.csv(i)
df <- rbind(temp_df, grants)
}
return(df)
}
grants2 <- read_data()
read_data <- function(){
df <- data.frame()
number <- 0
for (i in dir(pattern = "*.csv")){
temp_df <- read.csv(i)
df <- rbind(temp_df, grants)
number <-number +1
}
print(paeste(as.character(number), "files were combined"))
return(df)
}
grants2 <- read_data()
read_data <- function(){
df <- data.frame()
number <- 0
for (i in dir(pattern = "*.csv")){
temp_df <- read.csv(i)
df <- rbind(temp_df, grants)
number <-number +1
}
print(paste(as.character(number), "files were combined"))
return(df)
}
grants2 <- read_data()
read_data <- function(){
df <- data.frame()
number <<- 0
for (i in dir(pattern = "*.csv")){
temp_df <- read.csv(i)
df <- rbind(temp_df, grants)
number <<-number +1
}
print(paste(as.character(number), "files were combined"))
return(df)
}
grants2 <- read_data()
df <- mtcars
View(df)
cor.test(x = df$mpg, y = df$hp)
fit <- cor.test(x = df$mpg, y = df$hp)
str(fit)
cor.test(~mpg + hp, df)
plot(x = df$mpg, y = df$hp)
ggplot(df, aes( x = mpg , y = hp))+
geom_point(size = 5)
library(ggplot2)
ggplot(df, aes( x = mpg , y = hp))+
geom_point(size = 5)
ggplot(df, aes( x = mpg , y = hp, col = factor(cyl)))+
geom_point(size = 5)
df_numeric <- df[,c(1,2:7)]
pairs(df_numeric)
cor(df_numeric)
fit <- corr.test(df_numeric)
fit <- corr.test(df_numeric)
View(fit)
fit$r
fitt <- corr.test(df_numeric)
fitt <- cor.test(df_numeric)
?corr.test
??corr.test
library(psych)
fitt <- corr.test(df_numeric)
fit$r
df_numeric <- df[,c(1,2:7)]
pairs(df_numeric)
df_numeric <- df[,c(1,2:7)]
pairs(df_numeric)
library(gvlma)
install.packages("gvlma")
library(gvlma)
y <- read.csv("homosc.csv")
x <- lm(DV ~ IV, data = y)
a <- gvlma(x)
summary(a)
my_df <- read.csv("https://stepic.org/media/attachments/lesson/12088/homosc.csv")
x <- gvlma(DV ~ IV, data = my_df)
summary(x)
qqnorm(lm1$residuals)
lm1 <- lm(Education ~ Examination, swiss)
summary(lm1)
qqnorm(lm1$residuals)
lm2 <- lm(Education ~ Examination+Examination_squared, swiss)
qqline(lm1$residuals)
my_df <- read.csv("train.csv", sep=";")
View(my_df)
str(my_df)
ggplot(my_df, aes(read, math, col = gender))+
geom_point(size = 5)+
facet_grid(.~hon)+
theme(axis.text=element_text(size=25),
axis.title=element_text(size=25,face="bold"))
library(ggplot2)
ggplot(my_df, aes(read, math, col = gender))+
geom_point(size = 5)+
facet_grid(.~hon)+
theme(axis.text=element_text(size=25),
axis.title=element_text(size=25,face="bold"))
fit  <- glm(hon ~ read + math + gender, my_df, family = "binomial")
fit  <- glm(hon ~ read + math + gender, my_df, family = "binomial")
glm(hon ~ read + math + gender, my_df, family = "binomial")
library(ggplot2)
fit  <- glm(hon ~ read + math + gender, my_df, family = "binomial")
fit <- multinom(hon ~ read + math + gender, data = my_df)
library(nnet)
fit <- multinom(hon ~ read + math + gender, data = my_df)
summary(fit)
fit$coefficients
exp(fit$coefficients)
fit <- multinom(hon ~ read + math + gender, data = my_df)
exp(fit$coefficients)
my_df <- read.csv("train.csv", sep = ';',header = T, stringsAsFactors = T)
fit <- glm(hon ~ read + math + gender, data = my_df)
exp(fit$coefficients)
head(predict(object = fit, type = "response"))
ggplot(ToothGrowth, aes(x = supp, y=len, colour = dose))+
geom_boxplot()
ggplot(ToothGrowth, aes(x = supp, y=len, col = dose))+
geom_boxplot()
ggplot(ToothGrowth, aes(x = supp, y=len, col = factor(dose)))+
geom_boxplot()
ggplot(ToothGrowth, aes(x = supp, y=len, fill = factor(dose)))+
geom_boxplot()
library(ROCR)
pred_fit <- prediction(my_df$prob, my_df$hon)
perf_fit <- performance(pred_fit,"tpr","fpr")
library(ROCR)
pred_fit <- prediction(my_df$prob, my_df$hon)
perf_fit <- performance(pred_fit,"tpr","fpr")
plot(perf_fit, colorize=T , print.cutoffs.at = seq(0,1,by=0.1))
auc  <- performance(pred_fit, measure = "auc")
str(auc)
perf3  <- performance(pred_fit, x.measure = "cutoff", measure = "spec")
?ROCR
my_df$pred_resp  <- factor(ifelse(my_df$prob > 0.225, 1, 0), labels = c("N", "Y"))
plot(perf3, col = "red", lwd =2)
plot(add=T, perf4 , col = "green", lwd =2)
plot(add=T, perf5, lwd =2)
legend(x = 0.6,y = 0.3, c("spec", "sens", "accur"),
lty = 1, col =c('red', 'green', 'black'), bty = 'n', cex = 1, lwd = 2)
abline(v= 0.225, lwd = 2)
my_df$pred_resp  <- factor(ifelse(my_df$prob > 0.225, 1, 0), labels = c("N", "Y"))
my_df$correct  <- ifelse(my_df$pred_resp == my_df$hon, 1, 0)
ggplot(my_df, aes(prob, fill = factor(correct)))+
geom_dotplot()+
theme(axis.text=element_text(size=25),
axis.title=element_text(size=25,face="bold"))
mean(my_df$correct)
test_df  <- read.csv("test.csv", sep = ";")
test_df$hon  <- NA
test_df$hon  <- predict(fit, newdata = test_df, type = "response")
View(test_df)
test_df  <- read.csv("test.csv", sep = ";")
test_df$hon  <- NA
test_df$hon  <- predict(fit, newdata = test_df, type = "response")
data <- read.csv("data (1).csv")
data$admit <- as.factor(data$admit)
data$rank <- as.factor(data$rank)
model <- glm(admit ~ gre * rank, data = data, family = binomial)
data$predicted_prob <- predict(model, type = "response")
data <- read.csv("data (1).csv")
data$admit <- as.factor(data$admit)
data$rank <- as.factor(data$rank)
model <- glm(admit ~ gre * rank, data = data, family = binomial)
data$predicted_prob <- predict(model, type = "response")
data <- read.csv("data (1).csv")
data$admit <- as.factor(data$admit)
data$rank <- as.factor(data$rank)
model <- glm(admit ~ gre * rank, data = data, family = binomial)
data$predicted_prob <- predict(model, type = "response")
data$predicted_prob <- predict(model)
df  <- read.csv("https://stepic.org/media/attachments/lesson/11478/data.csv")
df
str(df)
df_known <- subset(df, admit != "NA")
df_NA <- subset(df, is.na(admit))
str(df_known)
str(df_NA)
fit  <- glm(admit ~ rank * gpa, df_known, family = "binomial")
fit$coefficients
head(predict(object = fit, type = "response"))
df_known$prob <- predict(object = fit, type = "response")
df_NA$prob_predict <- predict(fit, newdata = df_NA, type = "response")
df_NA$admit <- ifelse(df_NA$prob_predict > 0.4, 1, 0)
sum(df_NA$admit)
df  <- read.csv("https://stepic.org/media/attachments/lesson/11478/data.csv")
df
str(df)
df_known <- subset(df, admit != "NA")
df_NA <- subset(df, is.na(admit))
str(df_known)
str(df_NA)
fit  <- glm(admit ~ rank * gpa, df_known, family = "binomial")
fit$coefficients
head(predict(object = fit, type = "response"))
df_known$prob <- predict(object = fit, type = "response")
df_NA$prob_predict <- predict(fit, newdata = df_NA, type = "response")
df_NA$admit <- ifelse(df_NA$prob_predict > 0.4, 1, 0)
sum(df_NA$admit)
df  <- read.csv("https://stepic.org/media/attachments/lesson/11478/data.csv")
df
str(df)
df_known <- subset(df, admit != "NA")
df_NA <- subset(df, is.na(admit))
str(df_known)
str(df_NA)
fit  <- glm(admit ~ rank * gpa, df_known, family = "binomial")
fit$coefficients
head(predict(object = fit, type = "response"))
df_known$prob <- predict(object = fit, type = "response")
df_NA$prob_predict <- predict(fit, newdata = df_NA, type = "response")
df_NA$admit <- ifelse(df_NA$prob_predict > 0.4, 1, 0)
sum(df_NA$admit)
resid.norm <- function(fit){
color <- ifelse(shapiro.test(fitresiduals )
residuals)p.value < 0.05, 'red', 'green')
color <- ifelse(shapiro.test(fitresiduals )p.value < 0.05, 'red', 'green')
resid.norm <- function(fit){
color <- ifelse(shapiro.test(fitresiduals )p.value < 0.05, 'red', 'green')
resid.norm <- function(fit){
color <- ifelse(shapiro.test(fitresiduals ), p.value < 0.05, 'red', 'green')
df <- data.frame(fit$residuals)
names(df)[names(df) == 'fit.residuals'] <- 'res'
my_plot <- ggplot(df, aes(res)) + geom_histogram(bins = 30, fill = color)
}
df <- subset(mtcars, select = c ("wt", "mpg", "disp", "drat", "hp"))
model <- lm(wt~mpg+disp+drat+hp, df)
model <- lm(wt~mpg+disp+hp, df)
summary(model)
x <- c ("mpg", "disp", "drat", "hp",
"mpg + disp", "mpg + drat", "mpg + hp",
"disp + drat", "disp + hp",
"drat + hp",
"mpg + disp + drat", "mpg + disp + hp", "mpg + drat + hp",
"disp + drat + hp",
"mpg + disp + drat + hp")
# Создаем будущий вектор для значений Adj R^2
r.sq <- NA
# Заполняем вектор
for (i in c (1 : length (x))) {
formula <- as.character (c ("wt ~", x [i]))
fit <- lm (formula, mtcars)
r.sq [i] <- summary (fit) $ adj.r.squared
}
# Самый большой - искомый. В формулу вводим результат следующей команды:
x [which.max (r.sq)]
