# Что будет выведено в результате выполнения приведённой ниже программы? bin
# voice = "baritone"
# print(voice[0] + voice[3] + voice[-2])



# Что будет выведено в результате выполнения приведённой ниже программы? произойдет ошибка
# voice = "baritone"
# print(voice[-9])


# Что будет выведено в результате выполнения приведённой ниже программы? rit
# voice = "baritone"
# print(voice[2:5])



# С помощью каких срезов можно выделить подстроку bar из строки voice = "baritone"?
# voice[-8:-5]
# voice[0:3:1]
# voice[0:-5]
# voice[:3]
# voice[0:3]


# Что будет выведено в результате выполнения приведённой ниже программы? not
# voice = "tenor" 
# print(voice[-3:-1] + voice[:-4])





# Что будет выведено в результате выполнения приведённой ниже программы?  ronet
# voice = "tenor"
# print(voice[::-1])


# Что будет выведено в результате выполнения приведённой ниже программы? bs
# voice = "bass"
# print(voice[::2])


# Что будет выведено в результате выполнения приведённой ниже программы? bassssab
# voice = "bass"
# print(voice[:] + voice[::-1])





# Напишите программу, которая принимает на вход n произвольных строк и определяет количество тех из них, которые начинаются и заканчиваются на одну и ту же букву.
# Входные данные
# На вход подаётся сначала одно натуральное число n, а затем n строк в нижнем регистре. Каждый элемент подается с новой строки.
# Выходные данные
# Выведите одно число — количество подходящих строк.
# Sample Input:
# 5
# deed
# mother
# level
# kick
# leonid
# Sample Output:
# 3
# n = int(input())
# t = 0
# for i in range (n):
#     a = input()
#     if a[0] == a[-1]:
#         t+=1
# print(t)





# Напишите программу, которая принимает на вход произвольную строку и выводит результат конкатенации первых 5 и последних 7 её символов.
# Примечание. На вход подаются строки длиной не менее 7.
# Входные данные
# На вход подаётся одна произвольная строка.
# Выходные данные
# Выведите одну строку — соответствующий заданному условию результат конкатенации.
# Sample Input 1:
# Обольститель
# Sample Output 1:
# Обольститель
# Sample Input 2:
# Нарцисс
# Sample Output 2:
# НарциНарцисс
# a = input()
# print(a[0:5] + a[-7:])




# Напишите программу, которая принимает на вход произвольную строку и выводит её задом наперед.
# Примечание. На вход подаются непустые строки.
# Входные данные
# На вход подаётся одна произвольная строка.
# Выходные данные
# Выведите одно значение — перевернутую строку.
# Sample Input:
# amam
# Sample Output:
# mama
# a = input()
# print(a[::-1])




# Напишите программу, которая принимает на вход произвольную строку и выводит срез из её символов, стоящих на нечётных индексах.
# Примечание. На вход подаются строки длиной не менее 2.
# Входные данные
# На вход подаётся одна произвольная строка.
# Выходные данные
# Выведите одну строку — соответствующий заданному условию срез.
# Sample Input 1:
# barabaraberebere
# Sample Output 1:
# aaaaeeee
# Sample Input 2:
# stuff!
# Sample Output 2:
# tf!
# a = input()
# print(a[1::2])




# Напишите программу, которая принимает на вход n произвольных строк и определяет количество тех из них, которые являются палиндромами.
# Примечание. Палиндром — это строка, которая читается одинаково в обоих направлениях. Например, "шалаш".
# Входные данные
# На вход подаётся сначала одно натуральное число n, а затем n строк в нижнем регистре. Каждый элемент подается с новой строки.
# Выходные данные
# Выведите одно число — количество подходящих строк.
# Sample Input:
# 4
# peep
# rub
# level
# sunny
# Sample Output:
# 2
# n = int(input())
# k = 0
# for i in range(n):
#     a = input()
#     if a[::] == a[::-1]:
#         k += 1
# print(k)





# Напишите программу, которая принимает на вход произвольную строку, состоящую только из цифр, и выводит сумму содержащихся в ней чётных цифр, стоящих на нечётных индексах.
# Входные данные
# На вход подаётся одна произвольная строка, состоящая из цифр.
# Выходные данные
# Выведите одно число — сумму подходящих под условие цифр.
# Sample Input:
# 213456789
# Sample Output:
# 18
# n = input()
# k  =0
# for i in range(1 ,len(n), 2):
#     di= int(n[i])
#     if di % 2 == 0:
#         k+=di
# print(k)















