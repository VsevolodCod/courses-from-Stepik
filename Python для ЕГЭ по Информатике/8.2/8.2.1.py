# Откройте файл электронной таблицы, содержащей в каждой строке три натуральных числа. Определите количество строк таблицы, в которых квадрат максимального из трёх чисел больше удвоенного произведения двух других чисел в строке.
# file = open("8.2/file1.txt")
# k = 0
# for line in file:
#     nums = line.split()
#     for i in range(len (nums)):
#         nums[i] = int(nums[i])
#     nums.sort()
#     f = nums[-1]**2
#     f1 = 2 * nums[0] * nums[1]
#     if f >f1:
#         k +=1
# print(k)





# Откройте файл электронной таблицы, содержащей в каждой строке четыре натуральных числа. Определите количество строк таблицы, в которых сумма наибольшего и наименьшего чисел не больше суммы двух оставшихся.
# file = open("8.2/file2.txt")
# c = 0
# for line in file:
#     nums = line.split()
#     for i in range(len(nums)):
#         nums[i] = int(nums[i])
#     nums.sort()
#     mi = nums[0]  
#     ma = nums[-1]  
#     su = nums[1] + nums[2]
#     if (mi + ma) <= su:
#         c += 1  
# file.close()  
# print(c) 
# 15115




# Откройте файл электронной таблицы, содержащей в каждой строке четыре натуральных числа. Определите количество строк таблицы, содержащих числа, для которых выполнены оба условия: 
# – наибольшее из четырёх чисел меньше суммы трёх других; 
# – четыре числа можно разбить на две пары чисел с равными суммами. 
# file = open("8.2/file3.txt") 
# k = 0 
# for line in file: 
#     nums = line.split() 
#     for i in range(len(nums)): 
#         nums[i] = int(nums[i]) 
#     nums.sort() 
#     ma = nums[-1] 
#     if (nums[0] + nums[1] + nums[2] > ma):
#         if (nums[0] + nums[3] == nums[1] + nums[2]):
#             k += 1   
# file.close()   
# print(k)







# В файле содержится последовательность целых чисел. Элементы последовательности могут принимать целые значения от 
# −10000 до 10000 включительно. Определите и запишите в ответе сначала количество пар элементов последовательности, произведение которых положительно, а сумма кратна 7, затем минимальное из произведений элементов таких пар. В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
# file = open("8.2/YCtBkFMEz.txt")
# nums = []
# for num in file:
#     nums.append(int(num))
# file.close() 
# pairs = []
# for i in range(len(nums) - 1):
#     product = nums[i] * nums[i + 1]
#     sum_pair = nums[i] + nums[i+1]
#     if (product > 0) and (sum_pair % 7 == 0):
#         pairs.append(product)
# if pairs:
#     print(len(pairs), min(pairs))
# else:
#     print(0, 0)








# В файле содержится последовательность натуральных чисел. Элементы последовательности могут принимать целые значения от 
# 1 до 100 000 включительно. Определите количество пар последовательности, в которых остаток от деления хотя бы одного из элементов на 
# 117 равен минимальному элементу последовательности. В ответе запишите количество найденных пар, затем максимальную из сумм элементов таких пар. В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
# Открываем файл и читаем числа
# file = open("8.2\X2-8sfFqD.txt")
# nums = []
# for num in file:
#     nums.append(int(num))
# file.close()
# if not nums:  
#     print(0, 0)
# else:
#     mi = min(nums)  
#     max_sum = 0
#     pair_count = 0
#     for i in range(len(nums) - 1):
#         if (nums[i] % 117 == mi) or (nums[i + 1] % 117 == mi):
#             pair_count += 1
#             max_sum = max(max_sum, nums[i] + nums[i + 1])
#     print(pair_count, max_sum)  



# В файле содержится последовательность целых чисел. Элементы последовательности могут принимать целые значения от 
# −10000 до 10000 включительно. Определите и запишите в ответе сначала количество троек элементов последовательности, в которых произведение кратно 7, а сумма оканчивается на 5, затем максимальную из сумм элементов таких троек. В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
# file = open("8.2\_DAj19Xk-.txt")
# nums = []
# for num in file:
#     nums.append(int(num))
# c = 0
# ma = float('-inf')  
# for i in range(len(nums) - 2):
#     trio = nums[i:i + 3]
#     product = trio[0] * trio[1] * trio[2]
#     tot = sum(trio)
#     if product % 7 == 0 and tot % 10 == 5:
#         c += 1
#         ma = max(ma, tot)
# if c > 0:
#     print(c, ma)
# else:
#     print(0, 0)