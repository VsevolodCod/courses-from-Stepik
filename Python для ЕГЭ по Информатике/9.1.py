# Какие из приведённых ниже названий допустимы для функций?   function_123 BestCourse










# Сопоставление аргументов и параметров определения
# Аргументы       Значения, которые передаются в функцию при её вызове
# Параметры       Переменные, которые принимают переданные в функцию значения





# Что выведет приведённый ниже код?     31
# def func(x):
#     y = 3 * x + 1
#     return y
# print(func(10))
# Если код ничего не выведет, укажите в ответе «Ничего» без кавычек.
# Если код завершится с ошибкой, укажите в ответе «Ошибка» без кавычек.



# Что выведет приведённый ниже код?     YES
# def func(x):
#     if x > 0:
#         return 'YES'
#     return 'NO'
# print(func(10))
# Если код ничего не выведет, укажите в ответе «Ничего» без кавычек.
# Если код завершится с ошибкой, укажите в ответе «Ошибка» без кавычек.





# Что выведет приведённый ниже код? 100
# def func(x):
#     return x ** 2
#     return x ** 3
# print(func(10))
# Если код ничего не выведет, укажите в ответе «Ничего» без кавычек.
# Если код завершится с ошибкой, укажите в ответе «Ошибка» без кавычек.





# Что выведет приведённый ниже код?     None
# def func(x):
#     a = x + x
#     b = a - 5 * a
# print(func(10))
# Если код ничего не выведет, укажите в ответе «Ничего» без кавычек.
# Если код завершится с ошибкой, укажите в ответе «Ошибка» без кавычек.





# Что выведет приведённый ниже код?         Ошибка
# print(func(25)) 
# def func(x):
#     number = 14
#     return x - 7 * number
# Если код ничего не выведет, укажите в ответе «Ничего» без кавычек.
# Если код завершится с ошибкой, укажите в ответе «Ошибка» без кавычек.







# Что выведет приведённый ниже код? -16
# def func(a, b, c):
#     a = c + b
#     c = b - a + 1
#     return c
# a = 14
# b = 17
# c = -1
# print(func(c, a, b))
# Если код ничего не выведет, укажите в ответе «Ничего» без кавычек.
# Если код завершится с ошибкой, укажите в ответе «Ошибка» без кавычек.




# Что выведет приведённый ниже код?         Ошибка
# def func(a):
#     a *= 2
#     return a
# x = 14
# y = x + a
# print(func(x))
# Если код ничего не выведет, укажите в ответе «Ничего» без кавычек.
# Если код завершится с ошибкой, укажите в ответе «Ошибка» без кавычек.




# Что выведет приведённый ниже код?
# def func():
#     print('Какой прекрасный день!')
# func()
# Если код ничего не выведет, укажите в ответе «Ничего» без кавычек.
# Если код завершится с ошибкой, укажите в ответе «Ошибка» без кавычек.



# Реализуйте функцию product, которая принимает на вход три числа и возвращает их произведение.
# Примечание. Функцию вызывать не нужно. 
# def product(a, b, c):
#     return a * b * c




# Реализуйте функцию geron, которая принимает на вход стороны треугольника и возвращает его площадь.
# Формула для площади по трём сторонам: p(p−a)(p−b)(p−c), где p — полупериметр; a, b, c — стороны треугольника.
# Примечание. Функцию вызывать не нужно.
# from math import *
# def geron(a , b ,s):
#     p = (a + b + s) / 2
#     return sqrt(p * (p-a) * (p - b) * (p - s))




# Реализуйте функцию stars, которая принимает на вход два числа — длину и ширину прямоугольника и выводит на экран прямоугольник, нарисованный знаками «*». 
# Примечание 1. Функцию вызывать не нужно.
# Примечание 2. Под длиной в данной задаче подразумевается количество звёздочек в одной строке. Под шириной — количество строк со звёздочками. Первый аргумент — длина, второй — ширина.
# def stars(a , n):
#     for i in range (n):
#         print("*" * a)






# Реализуйте функцию sum_even_dig, которая принимает на вход одно натуральное число и возвращает сумму чётных цифр числа или 0, если таких цифр нет.
# Примечание. Функцию вызывать не нужно.
# def sum_even_dig(n):
#     t = 0
#     ha = False  
#     for i in str(n):
#         if int(i) % 2 == 0: 
#             t += int(i)
#             ha = True  
#     return t if ha else 0




# Реализуйте функцию count_divisors, которая принимает на вход одно натуральное число и возвращает количество делителей переданного числа.
# Примечание. Функцию вызывать не нужно.
# def count_divisors(n):
#     c = 0
#     for i in range(1, n + 1):
#         if n % i == 0: 
#             c += 1
#     return c



