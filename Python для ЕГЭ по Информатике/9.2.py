# Что такое рекурсивная функция?  Это функция, которая вызывает саму себя




# Дана рекурсивная функция: 
# def recur_func(n):
#     if n == 5:
#         return n ** 2
#     return recur_func(n - 2) + 3
# print(recur_func(11))
# Какая глубина рекурсии при вызове recur_func(11)?   3
# Если рекурсия бесконечна, укажите в ответе «Бесконечная рекурсия» без кавычек.






# Что выведет код приведённый ниже код?   20
# def rec_func(num):
#     if num < 10:
#         return num
#     return num % 10 + rec_func(num // 10)
# print(rec_func(596))
#  Если рекурсия бесконечна, укажите в ответе «Бесконечная рекурсия» без кавычек.




# Что выведет приведённый ниже код?  
# **
# ***
# ****
# *****
# ****
# def draw(n):
#     if n <= 4:
#         print('*' * n)
#     else:
#         print('*' * (10 - n))
#         draw(n - 1)
# draw(8)
# Если рекурсия бесконечна, укажите в ответе «Бесконечная рекурсия» без кавычек.





# Что выведет приведённый ниже код?         Бесконечная рекурсия
# def draw(n):
#     if n <= 4:
#         print('*' * n)
#         draw(n - 1)
#     else:
#         print('*' * (10 - n))
#         draw(n - 1)
# draw(8)
# Если рекурсия бесконечна, укажите в ответе «Бесконечная рекурсия» без кавычек.





# Напишите рекурсивную функцию product, которая принимает на вход одно натуральное число n, а возвращает произведение его цифр
# Примечание. Функцию вызывать не нужно.
# Sample Input:
# 175
# Sample Output:
# 35
# def product(n):
#     if n < 10:
#         return n
#     else:
#         return (n % 10) * product(n // 10)









# Напишите рекурсивную функцию odd_factorial, которая принимает на вход одно натуральное число n, а возвращает произведение всех нечётных чисел от 1 до n включительно.
# Примечание. Функцию вызывать не нужно.
# def odd_factorial(n):
#     if n < 1:
#         return 1
#     elif n % 2 != 0:
#         return n * odd_factorial(n - 2)
#     else:
#         return odd_factorial(n - 1)





# Напишите рекурсивную функцию fibonacci, которая на вход принимает порядковый номер числа Фибоначчи, а возвращает значение числа из этой последовательности.
# Примечание 1. Функцию вызывать не нужно.
# Примечание 2. Последовательность Фибоначчи — последовательность целых чисел, в которой очередное число получается из суммы двух предыдущих. Начало последовательности: 0,1,1,2,3,5,8,13...
# def fibonacci(n):
#     if n <= 0:
#         return None 
#     elif n == 1:
#         return 0
#     elif n == 2:
#         return 1
#     else:
#         return fibonacci(n-1) + fibonacci(n-2)

# Алгоритм вычисления значения функции F (n), где п - натуральное
# число, задан следующими соотношениями:
# F(n) = n + 5 при n <= 7
# F(n) = 3 * n * F(n - 2), если n > 7
# Чему равно значение функции F(24)?  8849926265241600
# def F(n): 
#     if n <= 7:
#         return n + 5
#     return 3 * n * F(n - 2)
# print(F(24))


# Алгоритм вычисления значения функции F (n), где n - натуральное число, задан следующими соотношениями:
# F(n) = 1 при п <= 4
# F(n) = n * F(n - 1), если п > 4
# Чему равно значение выражения F(80) F(78) F(76)    37951914
# def F(n):
#     if n <= 4:
#         return 1
#     return n * F(n - 1)
# print((F(80) - F(78)) / F(76))

# Алгоритм вычисления значения функции F(n), где п - натуральное число, задан следующими соотношениями:
# F(n) = 111 при n < 22
# F(n) = n + 7 * F(n - 3), если n > = 22 и при этом n чётно.
# F(n) = 5 * F(n - 1), если п > = 22 и при этом п нечётно.
# Чему равно произведение ненулевых цифр у значения выражения F(35) + F(11)? 3360
# def F(n):
#     if n < 22:
#         return 111
#     elif n % 2 == 0:  
#         return n + 7 * F(n - 3)
#     else:  
#         return 5 * F(n - 1)
# resF35 = F(35)
# resF11 = F(11)
# t = resF35 + resF11
# def product_of_nonzero_digits(num):
#     p = 1
#     for digit in str(num):
#         if digit != '0':
#             p *= int(digit)
#     return p
# prod = product_of_nonzero_digits(t)
# print(prod)